{"version":3,"sources":["components/LaunchItem.tsx","components/Launches.tsx","components/Launch.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LaunchItem","launch","className","to","flight_number","launch_date_local","mission_name","rocket","rocket_name","LAUNCHES","gql","Launches","useQuery","loading","error","data","launches","map","key","LAUNCH","Launch","flightNumber","useParams","variables","parseInt","undefined","launch_year","launch_success","rocket_id","rocket_type","client","ApolloClient","uri","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAGaA,EAA2C,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACtD,yBAAKC,UAAU,cACb,kBAAC,IAAD,CAAMC,GAAE,kBAAaF,EAAOG,gBAC1B,8CACA,6BAAMH,EAAOG,gBAEf,kDACA,6BAAMH,EAAOI,mBACb,6CACA,6BAAMJ,EAAOK,cACb,4CACA,6BAAML,EAAOM,OAAOC,e,wTCRxB,IAAMC,EAAWC,YAAH,KAiBDC,EAAyB,WAAO,IAAD,EACTC,YAAmBH,GAA5CI,EADkC,EAClCA,QAASC,EADyB,EACzBA,MAAOC,EADkB,EAClBA,KAExB,OAAIF,EAAgB,yCAEhBC,EAAc,oCAGhB,2CACGC,QADH,IACGA,OADH,EACGA,EAAMC,SAASC,KAAI,SAAAhB,GAAM,OACxB,kBAAC,EAAD,CACEiB,IAAG,UAAKjB,EAAOG,eAAZ,OAA4BH,EAAOK,cACtCL,OAAQA,S,yWC5BlB,IAAMkB,EAAST,YAAH,KAiBCU,EAAuB,WAAO,IAClBC,EAAiBC,cAAhClB,cADgC,EAEPQ,YAA6BO,EAAQ,CACpEI,UAAW,CACTnB,cAAeiB,EAAeG,SAASH,QAAgBI,KAFnDZ,EAFgC,EAEhCA,QAASC,EAFuB,EAEvBA,MAAOC,EAFgB,EAEhBA,KAMxB,GAAIF,EAAS,OAAO,yCAEpB,GAAIC,EAAO,OAAO,oCAElB,KAAI,OAACC,QAAD,IAACA,OAAD,EAACA,EAAMd,QAAQ,OAAO,sCAZc,MAqBpCc,EAAKd,OANPG,EAfsC,EAetCA,cACAE,EAhBsC,EAgBtCA,aACAoB,EAjBsC,EAiBtCA,YACArB,EAlBsC,EAkBtCA,kBACAsB,EAnBsC,EAmBtCA,eAnBsC,IAoBtCpB,OAAUqB,EApB4B,EAoB5BA,UAAWpB,EApBiB,EAoBjBA,YAAaqB,EApBI,EAoBJA,YAGpC,OACE,6BACE,+CAAqBzB,GACrB,8CAAoBE,GACpB,6CAAmBoB,GACnB,mDAAyBrB,GACzB,gDAAsBsB,GACtB,2CAAiBC,GACjB,6CAAmBpB,GACnB,6CAAmBqB,KChDnBC,G,MAAS,IAAIC,IAAa,CAC9BC,IAAK,cAqBQC,EAlBO,kBACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,yBAAK5B,UAAU,OACb,kBAAC,IAAD,CAAMC,GAAG,KACP,4BAAQD,UAAU,cAAlB,WAEF,yBAAKA,UAAU,eACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgC,OAAK,EAACC,KAAK,IAAIC,UAAWzB,IACjC,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,yBAAyBC,UAAWhB,UCV9CiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b802f19a.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const LaunchItem: React.FC<{ launch: Launch }> = ({ launch }) => (\n  <div className=\"App-launch\">\n    <Link to={`/launch/${launch.flight_number}`}>\n      <div>flight_number</div>\n      <div>{launch.flight_number}</div>\n    </Link>\n    <div>launch_date_local</div>\n    <div>{launch.launch_date_local}</div>\n    <div>mission_name</div>\n    <div>{launch.mission_name}</div>\n    <div>rocket_name</div>\n    <div>{launch.rocket.rocket_name}</div>\n  </div>\n);\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { LaunchItem } from './LaunchItem';\n\nconst LAUNCHES = gql`\n  query Launches {\n    launches {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport const Launches: React.FC<{}> = () => {\n  const { loading, error, data } = useQuery<Launches>(LAUNCHES);\n\n  if (loading) return <p>Loading...</p>;\n\n  if (error) return <p>Error</p>;\n\n  return (\n    <>\n      {data?.launches.map(launch => (\n        <LaunchItem\n          key={`${launch.flight_number}${launch.mission_name}`}\n          launch={launch}\n        />\n      ))}\n    </>\n  );\n};\n","/* eslint-disable camelcase */\n/* eslint-disable @typescript-eslint/camelcase */\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { useParams } from 'react-router-dom';\n\nconst LAUNCH = gql`\n  query Launch($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport const Launch: React.FC<{}> = () => {\n  const { flight_number: flightNumber } = useParams();\n  const { loading, error, data } = useQuery<{ launch: Launch }>(LAUNCH, {\n    variables: {\n      flight_number: flightNumber ? parseInt(flightNumber) : undefined,\n    },\n  });\n\n  if (loading) return <p>Loading...</p>;\n\n  if (error) return <p>Error</p>;\n\n  if (!data?.launch) return <p>No data</p>;\n\n  const {\n    flight_number,\n    mission_name,\n    launch_year,\n    launch_date_local,\n    launch_success,\n    rocket: { rocket_id, rocket_name, rocket_type },\n  } = data.launch;\n\n  return (\n    <div>\n      <div>flight_number: {flight_number}</div>\n      <div>mission_name: {mission_name}</div>\n      <div>launch_year: {launch_year}</div>\n      <div>launch_date_local: {launch_date_local}</div>\n      <div>launch_success: {launch_success}</div>\n      <div>rocket_id: {rocket_id}</div>\n      <div>rocket_name: {rocket_name}</div>\n      <div>rocket_type: {rocket_type}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport { Launches } from './components/Launches';\nimport { Launch } from './components/Launch';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\n\nconst App: React.FC = () => (\n  <Router>\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <Link to=\"/\">\n          <header className=\"App-header\">SpaceX</header>\n        </Link>\n        <div className=\"App-content\">\n          <Switch>\n            <Route exact path=\"/\" component={Launches} />\n            <Route exact path=\"/launch/:flight_number\" component={Launch} />\n          </Switch>\n        </div>\n      </div>\n    </ApolloProvider>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}