{"version":3,"sources":["components/Loader.tsx","components/Launch.tsx","routes/LaunchRoute.tsx","components/LaunchItem.tsx","components/Launches.tsx","routes/LaunchesRoute.tsx","components/Header.tsx","layouts/CoreLayout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Loader","active","inline","size","data-testid","GET_LAUNCH","gql","Launch","flightNumber","useQuery","variables","flight_number","parseInt","undefined","loading","error","data","launch","mission_name","launch_year","launch_date_local","launch_success","rocket","rocket_id","rocket_name","rocket_type","Table","celled","unstackable","Body","Row","Cell","Icon","name","color","LaunchRoute","useParams","LaunchItem","Card","centered","as","Link","to","Content","Header","Meta","Description","GET_LAUNCHES","Launches","Group","itemsPerRow","window","innerWidth","launches","map","key","LaunchesRoute","style","textAlign","CoreLayout","Container","marginTop","exact","path","component","client","ApolloClient","uri","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ae57ab9.chunk.js","sourcesContent":["import React from 'react';\nimport { Loader as SLoader } from 'semantic-ui-react';\n\nexport const Loader: React.FC<{}> = () => (\n  <SLoader active inline=\"centered\" size=\"big\" data-testid=\"loader\" />\n);\n","/* eslint-disable camelcase */\n/* eslint-disable @typescript-eslint/camelcase */\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { Table, Icon } from 'semantic-ui-react';\nimport { Loader } from './Loader';\n\nexport const GET_LAUNCH = gql`\n  query Launch($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport const Launch: React.FC<{ flightNumber?: string }> = ({\n  flightNumber,\n}) => {\n  const { loading, error, data } = useQuery<{ launch: Launch }>(GET_LAUNCH, {\n    variables: {\n      flight_number: flightNumber ? parseInt(flightNumber) : undefined,\n    },\n  });\n\n  if (loading) return <Loader />;\n\n  if (error) return <p data-testid=\"launch-error\">Error</p>;\n\n  if (!data?.launch) return <p>No data</p>;\n\n  const {\n    flight_number,\n    mission_name,\n    launch_year,\n    launch_date_local,\n    launch_success,\n    rocket: { rocket_id, rocket_name, rocket_type },\n  } = data.launch;\n\n  return (\n    <Table celled unstackable data-testid=\"launch-data\">\n      <Table.Body>\n        <Table.Row>\n          <Table.Cell>Flight number</Table.Cell>\n          <Table.Cell>{flight_number}</Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell>Mission name</Table.Cell>\n          <Table.Cell>{mission_name}</Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell>Launch year</Table.Cell>\n          <Table.Cell>{launch_year}</Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell>Launch date local</Table.Cell>\n          <Table.Cell>{launch_date_local}</Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell>Rocket id</Table.Cell>\n          <Table.Cell>{rocket_id}</Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell>Rocket name</Table.Cell>\n          <Table.Cell>{rocket_name}</Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell>Rocket type</Table.Cell>\n          <Table.Cell>{rocket_type}</Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell>Launch success</Table.Cell>\n          <Table.Cell>\n            {launch_success ? (\n              <Icon name=\"checkmark\" color=\"green\" />\n            ) : (\n              <Icon name=\"close\" color=\"red\" />\n            )}\n          </Table.Cell>\n        </Table.Row>\n      </Table.Body>\n    </Table>\n  );\n};\n","import React from 'react';\nimport { Launch } from 'components/Launch';\nimport { useParams } from 'react-router-dom';\n\nexport const LaunchRoute: React.FC<{}> = () => {\n  const { flight_number: flightNumber } = useParams();\n  return <Launch flightNumber={flightNumber} />;\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Icon } from 'semantic-ui-react';\n\nexport const LaunchItem: React.FC<{ launch: Launch }> = ({ launch }) => (\n  <Card\n    centered\n    as={Link}\n    to={`/launch/${launch.flight_number}`}\n    color={launch.launch_success ? 'green' : 'red'}\n  >\n    <Card.Content>\n      <Card.Header>{launch.mission_name}</Card.Header>\n      <Card.Meta>\n        <Icon name=\"calendar\" />\n        {launch.launch_date_local}\n      </Card.Meta>\n      <Card.Description>\n        <Icon name=\"rocket\" />\n        {launch.rocket.rocket_name}\n      </Card.Description>\n    </Card.Content>\n  </Card>\n);\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { Card } from 'semantic-ui-react';\nimport { Loader } from 'components/Loader';\nimport { LaunchItem } from './LaunchItem';\n\nexport const GET_LAUNCHES = gql`\n  query Launches {\n    launches {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport const Launches: React.FC<{}> = () => {\n  const { loading, error, data } = useQuery<{ launches: Launch[] }>(\n    GET_LAUNCHES\n  );\n\n  if (loading) return <Loader />;\n\n  if (error) return <p>Error</p>;\n\n  return (\n    <Card.Group\n      data-testid=\"launches-data\"\n      itemsPerRow={window.innerWidth > 767 ? 2 : 1}\n    >\n      {data?.launches.map(launch => (\n        <LaunchItem\n          key={`${launch.flight_number}${launch.mission_name}`}\n          launch={launch}\n        />\n      ))}\n    </Card.Group>\n  );\n};\n","import React from 'react';\nimport { Launches } from 'components/Launches';\n\nexport const LaunchesRoute: React.FC<{}> = () => <Launches />;\n","import React from 'react';\nimport { Header as SHeader } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nexport const Header: React.FC<{ style?: React.CSSProperties }> = ({\n  style,\n}) => (\n  <SHeader data-testid=\"header\" as=\"h1\" textAlign=\"center\" style={style}>\n    <Link to=\"/\">SpaceX</Link>\n  </SHeader>\n);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { LaunchRoute } from 'routes/LaunchRoute';\nimport { LaunchesRoute } from 'routes/LaunchesRoute';\nimport { Header } from 'components/Header';\nimport { Container } from 'semantic-ui-react';\n\nexport const CoreLayout: React.FC<{}> = () => (\n  <Container>\n    <Header style={{ marginTop: '2rem' }} />\n    <Switch>\n      <Route exact path=\"/\" component={LaunchesRoute} />\n      <Route exact path=\"/launch/:flight_number\" component={LaunchRoute} />\n    </Switch>\n  </Container>\n);\n","import React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { CoreLayout } from 'layouts/CoreLayout';\nimport 'semantic-ui-css/semantic.min.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\n\nconst App: React.FC = () => (\n  <Router>\n    <ApolloProvider client={client}>\n      <CoreLayout />\n    </ApolloProvider>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}