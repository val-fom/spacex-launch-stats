{"version":3,"sources":["layouts/CoreLayout.module.css","components/LaunchItem/LaunchItem.module.css","components/Header/Header.module.css","components/Launch.tsx","routes/LaunchRoute.tsx","components/LaunchItem/LaunchItem.tsx","components/Launches.tsx","routes/LaunchesRoute.tsx","components/Header/Header.tsx","layouts/CoreLayout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","GET_LAUNCH","gql","Launch","flightNumber","useQuery","variables","flight_number","parseInt","undefined","loading","error","data","data-testid","launch","mission_name","launch_year","launch_date_local","launch_success","rocket","rocket_id","rocket_name","rocket_type","LaunchRoute","useParams","LaunchItem","className","styles","container","to","GET_LAUNCHES","Launches","launches","map","key","LaunchesRoute","Header","header","CoreLayout","content","exact","path","component","client","ApolloClient","uri","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,UAAY,8BAA8B,QAAU,8B,mBCAtED,EAAOC,QAAU,CAAC,UAAY,gC,mBCA9BD,EAAOC,QAAU,CAAC,OAAS,yB,wgBCKpB,IAAMC,EAAaC,YAAH,KAiBVC,EAA8C,SAAC,GAErD,IADLC,EACI,EADJA,aACI,EAC6BC,YAA6BJ,EAAY,CACxEK,UAAW,CACTC,cAAeH,EAAeI,SAASJ,QAAgBK,KAFnDC,EADJ,EACIA,QAASC,EADb,EACaA,MAAOC,EADpB,EACoBA,KAMxB,GAAIF,EAAS,OAAO,uBAAGG,cAAY,kBAAf,cAEpB,GAAIF,EAAO,OAAO,uBAAGE,cAAY,gBAAf,SAElB,KAAI,OAACD,QAAD,IAACA,OAAD,EAACA,EAAME,QAAQ,OAAO,sCAXtB,MAoBAF,EAAKE,OANPP,EAdE,EAcFA,cACAQ,EAfE,EAeFA,aACAC,EAhBE,EAgBFA,YACAC,EAjBE,EAiBFA,kBACAC,EAlBE,EAkBFA,eAlBE,IAmBFC,OAAUC,EAnBR,EAmBQA,UAAWC,EAnBnB,EAmBmBA,YAAaC,EAnBhC,EAmBgCA,YAGpC,OACE,yBAAKT,cAAY,eACf,+CAAqBN,GACrB,8CAAoBQ,GACpB,6CAAmBC,GACnB,mDAAyBC,GACzB,gDAAsBC,GACtB,2CAAiBE,GACjB,6CAAmBC,GACnB,6CAAmBC,KCpDZC,EAA4B,WAAO,IACvBnB,EAAiBoB,cAAhCjB,cACR,OAAO,kBAAC,EAAD,CAAQH,aAAcA,K,iBCFlBqB,EAA2C,SAAC,GAAD,IAAGX,EAAH,EAAGA,OAAH,OACtD,yBAAKY,UAAWC,IAAOC,WACrB,kBAAC,IAAD,CAAMC,GAAE,kBAAaf,EAAOP,gBAC1B,+CAAqBO,EAAOP,gBAE9B,mDAAyBO,EAAOG,mBAChC,8CAAoBH,EAAOC,cAC3B,6CAAmBD,EAAOK,OAAOE,e,wTCL9B,IAAMS,EAAe5B,YAAH,KAiBZ6B,EAAyB,WAAO,IAAD,EACT1B,YAC/ByB,GADMpB,EADkC,EAClCA,QAASC,EADyB,EACzBA,MAAOC,EADkB,EAClBA,KAIxB,OAAIF,EAAgB,uBAAGG,cAAY,oBAAf,cAEhBF,EAAc,oCAGhB,yBAAKE,cAAY,iBAAjB,OACGD,QADH,IACGA,OADH,EACGA,EAAMoB,SAASC,KAAI,SAAAnB,GAAM,OACxB,kBAAC,EAAD,CACEoB,IAAG,UAAKpB,EAAOP,eAAZ,OAA4BO,EAAOC,cACtCD,OAAQA,SClCLqB,EAA8B,kBAAM,kBAAC,EAAD,O,iBCCpCC,EAAuB,kBAClC,4BAAQV,UAAWC,IAAOU,OAAQxB,cAAY,UAC5C,kBAAC,IAAD,CAAMgB,GAAG,KAAT,Y,iBCCSS,EAA2B,kBACtC,yBAAKZ,UAAWC,IAAOC,WACrB,kBAAC,EAAD,MACA,yBAAKF,UAAWC,IAAOY,SACrB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,yBAAyBC,UAAWnB,QCPxDoB,EAAS,IAAIC,IAAa,CAC9BC,IAAK,aAWQC,EARO,kBACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,kBAAC,EAAD,SCDcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.63889404.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CoreLayout_container__3IMX3\",\"content\":\"CoreLayout_content__LWKID\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LaunchItem_container__15JEI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\"};","/* eslint-disable camelcase */\n/* eslint-disable @typescript-eslint/camelcase */\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\nexport const GET_LAUNCH = gql`\n  query Launch($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport const Launch: React.FC<{ flightNumber?: string }> = ({\n  flightNumber,\n}) => {\n  const { loading, error, data } = useQuery<{ launch: Launch }>(GET_LAUNCH, {\n    variables: {\n      flight_number: flightNumber ? parseInt(flightNumber) : undefined,\n    },\n  });\n\n  if (loading) return <p data-testid=\"launch-loading\">Loading...</p>;\n\n  if (error) return <p data-testid=\"launch-error\">Error</p>;\n\n  if (!data?.launch) return <p>No data</p>;\n\n  const {\n    flight_number,\n    mission_name,\n    launch_year,\n    launch_date_local,\n    launch_success,\n    rocket: { rocket_id, rocket_name, rocket_type },\n  } = data.launch;\n\n  return (\n    <div data-testid=\"launch-data\">\n      <div>flight_number: {flight_number}</div>\n      <div>mission_name: {mission_name}</div>\n      <div>launch_year: {launch_year}</div>\n      <div>launch_date_local: {launch_date_local}</div>\n      <div>launch_success: {launch_success}</div>\n      <div>rocket_id: {rocket_id}</div>\n      <div>rocket_name: {rocket_name}</div>\n      <div>rocket_type: {rocket_type}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Launch } from 'components/Launch';\nimport { useParams } from 'react-router-dom';\n\nexport const LaunchRoute: React.FC<{}> = () => {\n  const { flight_number: flightNumber } = useParams();\n  return <Launch flightNumber={flightNumber} />;\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styles from './LaunchItem.module.css';\n\nexport const LaunchItem: React.FC<{ launch: Launch }> = ({ launch }) => (\n  <div className={styles.container}>\n    <Link to={`/launch/${launch.flight_number}`}>\n      <div>flight_number: {launch.flight_number}</div>\n    </Link>\n    <div>launch_date_local: {launch.launch_date_local}</div>\n    <div>mission_name: {launch.mission_name}</div>\n    <div>rocket_name: {launch.rocket.rocket_name}</div>\n  </div>\n);\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { LaunchItem } from './LaunchItem';\n\nexport const GET_LAUNCHES = gql`\n  query Launches {\n    launches {\n      flight_number\n      mission_name\n      launch_year\n      launch_date_local\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport const Launches: React.FC<{}> = () => {\n  const { loading, error, data } = useQuery<{ launches: Launch[] }>(\n    GET_LAUNCHES\n  );\n\n  if (loading) return <p data-testid=\"launches-loading\">Loading...</p>;\n\n  if (error) return <p>Error</p>;\n\n  return (\n    <div data-testid=\"launches-data\">\n      {data?.launches.map(launch => (\n        <LaunchItem\n          key={`${launch.flight_number}${launch.mission_name}`}\n          launch={launch}\n        />\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Launches } from 'components/Launches';\n\nexport const LaunchesRoute: React.FC<{}> = () => <Launches />;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styles from './Header.module.css';\n\nexport const Header: React.FC<{}> = () => (\n  <header className={styles.header} data-testid=\"header\">\n    <Link to=\"/\">SpaceX</Link>\n  </header>\n);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { LaunchRoute } from 'routes/LaunchRoute';\nimport { LaunchesRoute } from 'routes/LaunchesRoute';\nimport { Header } from 'components/Header';\nimport styles from './CoreLayout.module.css';\n\nexport const CoreLayout: React.FC<{}> = () => (\n  <div className={styles.container}>\n    <Header />\n    <div className={styles.content}>\n      <Switch>\n        <Route exact path=\"/\" component={LaunchesRoute} />\n        <Route exact path=\"/launch/:flight_number\" component={LaunchRoute} />\n      </Switch>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { CoreLayout } from 'layouts/CoreLayout';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\n\nconst App: React.FC = () => (\n  <Router>\n    <ApolloProvider client={client}>\n      <CoreLayout />\n    </ApolloProvider>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}